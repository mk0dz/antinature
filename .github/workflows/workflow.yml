name: Automated Version Publish

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Type of version bump (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          # Install development dependencies 
          pip install -e .[dev]
          # Fix package compatibility for Python 3.9
          if [[ "${{ matrix.python-version }}" == "3.9" ]]; then
            # Ensure specific qiskit versions that work with Python 3.9
            pip install "qiskit>=0.42.0,<2.0.0" "qiskit-aer>=0.11.0,<1.0.0"
            # Add required additional packages with compatible versions
            pip install "qiskit-nature>=0.5.0,<1.0.0" 
            # Install compatible qiskit-algorithms or qiskit-terra with algorithms included
            pip install "qiskit-terra>=0.23.0,<0.25.0"
            # Print installed versions for debugging
            pip list | grep qiskit
          fi
      
      - name: Run tests
        run: |
          # Run tests and skip linting errors
          pytest --cov=antinature
      
      - name: Format with Black
        run: |
          # Format code instead of just checking
          python -m black .
          python -m isort .

  version-bump:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bumpversion setuptools wheel

      - name: Bump version
        id: bump_version
        run: |
          # Get current version from setup.py or pyproject.toml
          current_version=$(grep -Po '(?<=version="|version = ")[^"]*' $(find . -name "setup.py" -o -name "pyproject.toml" | head -1))
          echo "Current version: $current_version"
          
          # Bump version
          bumpversion --allow-dirty ${{ github.event.inputs.bump_type }}
          
          # Get new version
          new_version=$(grep -Po '(?<=version="|version = ")[^"]*' $(find . -name "setup.py" -o -name "pyproject.toml" | head -1))
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Commit version changes
          git commit -am "Bump version to $new_version"
          
          # Create and push tag
          git tag v$new_version
          git push origin v$new_version
          git push

  release-build:
    needs: version-bump
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.version-bump.outputs.new_version }}
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Build release distributions
        run: |
          python -m pip install build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version-bump.outputs.new_version }}
          name: Release v${{ needs.version-bump.outputs.new_version }}
          generate_release_notes: true
          files: |
            dist/*

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - version-bump
      - release-build
    permissions:
      id-token: write  # Required for trusted publishing

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/